//line cc.y:28

// Copyright (c) 2013 Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// CAUTION: If this file is 'y.go', it was generated
// automatically from 'cc.y' - DO NOT EDIT in that case!

package cc

import __yyfmt__ "fmt"

//line cc.y:35
//line cc.y:39
type yySymType struct {
	yys int
	a   int //TODO
}

const IDENTIFIER = 57346
const CONSTANT = 57347
const STRING_LITERAL = 57348
const SIZEOF = 57349
const PTR_OP = 57350
const INC_OP = 57351
const DEC_OP = 57352
const LEFT_OP = 57353
const RIGHT_OP = 57354
const LE_OP = 57355
const GE_OP = 57356
const EQ_OP = 57357
const NE_OP = 57358
const AND_OP = 57359
const OR_OP = 57360
const MUL_ASSIGN = 57361
const DIV_ASSIGN = 57362
const MOD_ASSIGN = 57363
const ADD_ASSIGN = 57364
const SUB_ASSIGN = 57365
const LEFT_ASSIGN = 57366
const RIGHT_ASSIGN = 57367
const AND_ASSIGN = 57368
const XOR_ASSIGN = 57369
const OR_ASSIGN = 57370
const TYPE_NAME = 57371
const TYPEDEF = 57372
const EXTERN = 57373
const STATIC = 57374
const AUTO = 57375
const REGISTER = 57376
const CHAR = 57377
const SHORT = 57378
const INT = 57379
const LONG = 57380
const SIGNED = 57381
const UNSIGNED = 57382
const FLOAT = 57383
const DOUBLE = 57384
const CONST = 57385
const VOLATILE = 57386
const VOID = 57387
const STRUCT = 57388
const UNION = 57389
const ENUM = 57390
const ELLIPSIS = 57391
const CASE = 57392
const DEFAULT = 57393
const IF = 57394
const ELSE = 57395
const SWITCH = 57396
const WHILE = 57397
const DO = 57398
const FOR = 57399
const GOTO = 57400
const CONTINUE = 57401
const BREAK = 57402
const RETURN = 57403
const LOWER_THAN_ELSE = 57404

var yyToknames = []string{
	"IDENTIFIER",
	"CONSTANT",
	"STRING_LITERAL",
	"SIZEOF",
	"PTR_OP",
	"INC_OP",
	"DEC_OP",
	"LEFT_OP",
	"RIGHT_OP",
	"LE_OP",
	"GE_OP",
	"EQ_OP",
	"NE_OP",
	"AND_OP",
	"OR_OP",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"MOD_ASSIGN",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"LEFT_ASSIGN",
	"RIGHT_ASSIGN",
	"AND_ASSIGN",
	"XOR_ASSIGN",
	"OR_ASSIGN",
	"TYPE_NAME",
	"TYPEDEF",
	"EXTERN",
	"STATIC",
	"AUTO",
	"REGISTER",
	"CHAR",
	"SHORT",
	"INT",
	"LONG",
	"SIGNED",
	"UNSIGNED",
	"FLOAT",
	"DOUBLE",
	"CONST",
	"VOLATILE",
	"VOID",
	"STRUCT",
	"UNION",
	"ENUM",
	"ELLIPSIS",
	"CASE",
	"DEFAULT",
	"IF",
	"ELSE",
	"SWITCH",
	"WHILE",
	"DO",
	"FOR",
	"GOTO",
	"CONTINUE",
	"BREAK",
	"RETURN",
	"LOWER_THAN_ELSE",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line cc.y:464

/*TODO
#include <stdio.h>

extern char yytext[];
extern int column;

yyerror(s)
char *s;
{
	fflush(stdout);
	printf("\n%*s\n%*s\n", column, "^", column, s);
}
*/

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 212
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 1262

var yyAct = []int{

	72, 95, 94, 296, 145, 6, 233, 93, 121, 75,
	149, 41, 47, 5, 5, 226, 133, 123, 116, 11,
	48, 49, 50, 115, 201, 140, 10, 144, 139, 308,
	51, 294, 301, 160, 83, 120, 160, 147, 239, 57,
	138, 239, 347, 254, 119, 117, 63, 307, 300, 255,
	8, 118, 161, 122, 126, 125, 306, 128, 55, 238,
	61, 58, 62, 169, 114, 168, 134, 110, 240, 122,
	64, 154, 150, 302, 246, 159, 184, 160, 157, 199,
	102, 135, 126, 125, 127, 111, 112, 101, 165, 98,
	99, 315, 203, 213, 214, 204, 222, 70, 158, 215,
	192, 194, 126, 196, 216, 217, 28, 209, 210, 195,
	142, 32, 18, 19, 20, 21, 24, 25, 22, 23,
	29, 30, 17, 36, 37, 35, 340, 171, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 327, 185,
	223, 60, 59, 113, 336, 218, 341, 234, 200, 104,
	105, 106, 107, 108, 109, 29, 30, 154, 245, 150,
	247, 225, 243, 299, 142, 231, 224, 229, 248, 156,
	33, 207, 208, 198, 345, 241, 253, 31, 160, 141,
	256, 272, 31, 228, 326, 316, 126, 160, 31, 142,
	142, 39, 173, 142, 142, 262, 325, 249, 250, 251,
	126, 126, 293, 313, 292, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	258, 259, 265, 274, 285, 286, 287, 273, 200, 271,
	126, 125, 200, 57, 270, 134, 9, 126, 125, 290,
	134, 291, 126, 125, 304, 51, 298, 309, 142, 283,
	284, 275, 276, 303, 225, 231, 281, 282, 305, 277,
	278, 279, 280, 314, 267, 257, 266, 319, 56, 32,
	32, 126, 343, 317, 32, 312, 160, 318, 320, 160,
	142, 269, 311, 219, 137, 134, 160, 291, 45, 4,
	4, 136, 32, 202, 126, 125, 143, 324, 310, 271,
	42, 272, 160, 228, 126, 125, 134, 234, 328, 32,
	322, 332, 333, 334, 166, 164, 150, 126, 338, 331,
	329, 268, 236, 237, 163, 160, 339, 162, 33, 227,
	252, 228, 67, 33, 342, 31, 31, 344, 220, 53,
	31, 52, 221, 346, 205, 206, 348, 235, 335, 337,
	143, 227, 146, 228, 67, 288, 79, 111, 112, 101,
	67, 98, 99, 264, 148, 211, 212, 263, 33, 167,
	3, 78, 189, 190, 191, 143, 143, 202, 77, 143,
	143, 28, 12, 13, 14, 15, 16, 18, 19, 20,
	21, 24, 25, 22, 23, 29, 30, 17, 36, 37,
	35, 76, 80, 81, 84, 73, 85, 86, 87, 88,
	89, 90, 91, 92, 2, 113, 38, 242, 131, 54,
	129, 104, 105, 106, 107, 108, 109, 187, 232, 186,
	34, 188, 27, 26, 143, 7, 82, 46, 155, 40,
	172, 96, 79, 111, 112, 101, 28, 98, 99, 100,
	261, 97, 18, 19, 20, 21, 24, 25, 22, 23,
	29, 30, 17, 36, 37, 35, 143, 28, 12, 13,
	14, 15, 16, 18, 19, 20, 21, 24, 25, 22,
	23, 29, 30, 17, 36, 37, 35, 103, 80, 81,
	84, 1, 85, 86, 87, 88, 89, 90, 91, 92,
	0, 113, 0, 230, 0, 0, 0, 104, 105, 106,
	107, 108, 109, 79, 111, 112, 101, 0, 98, 99,
	0, 0, 82, 46, 69, 0, 0, 0, 0, 43,
	28, 12, 13, 14, 15, 16, 18, 19, 20, 21,
	24, 25, 22, 23, 29, 30, 17, 36, 37, 35,
	79, 111, 112, 101, 0, 98, 99, 0, 0, 80,
	81, 84, 0, 85, 86, 87, 88, 89, 90, 91,
	92, 65, 113, 0, 0, 0, 71, 0, 104, 105,
	106, 107, 108, 109, 64, 0, 46, 0, 0, 0,
	0, 0, 0, 82, 46, 244, 80, 81, 84, 0,
	85, 86, 87, 88, 89, 90, 91, 92, 0, 113,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 108,
	109, 79, 111, 112, 101, 0, 98, 99, 0, 0,
	82, 46, 153, 0, 0, 0, 28, 12, 13, 14,
	15, 16, 18, 19, 20, 21, 24, 25, 22, 23,
	29, 30, 17, 36, 37, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 81, 84,
	0, 85, 86, 87, 88, 89, 90, 91, 92, 0,
	113, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 46, 127, 111, 112, 101, 0, 98, 99,
	0, 82, 46, 0, 0, 127, 111, 112, 101, 0,
	98, 99, 0, 0, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 18, 19, 20, 21, 24, 25,
	22, 23, 29, 30, 17, 36, 37, 35, 127, 111,
	112, 101, 0, 98, 99, 0, 74, 0, 0, 0,
	0, 0, 113, 44, 0, 0, 0, 0, 104, 105,
	106, 107, 108, 109, 113, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 108, 109, 127, 111, 112, 101,
	0, 98, 99, 0, 0, 0, 151, 330, 66, 0,
	68, 0, 0, 127, 111, 112, 101, 113, 98, 99,
	0, 0, 0, 104, 105, 106, 107, 108, 109, 0,
	0, 0, 152, 0, 28, 0, 0, 0, 0, 151,
	18, 19, 20, 21, 24, 25, 22, 23, 29, 30,
	17, 36, 37, 35, 0, 113, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 108, 109, 0, 0, 32,
	0, 0, 113, 0, 0, 0, 82, 0, 104, 105,
	106, 107, 108, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 28, 12, 13, 14, 15, 16,
	18, 19, 20, 21, 24, 25, 22, 23, 29, 30,
	17, 36, 37, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 295,
	228, 0, 0, 0, 0, 31, 28, 12, 13, 14,
	15, 16, 18, 19, 20, 21, 24, 25, 22, 23,
	29, 30, 17, 36, 37, 35, 32, 0, 127, 111,
	112, 101, 0, 98, 99, 0, 0, 0, 0, 0,
	272, 295, 228, 127, 111, 112, 101, 31, 98, 99,
	0, 28, 12, 13, 14, 15, 16, 18, 19, 20,
	21, 24, 25, 22, 23, 29, 30, 17, 36, 37,
	35, 127, 111, 112, 101, 0, 98, 99, 0, 0,
	0, 0, 0, 0, 0, 33, 0, 113, 0, 0,
	321, 0, 31, 104, 105, 106, 107, 108, 109, 0,
	0, 0, 113, 0, 0, 297, 0, 0, 104, 105,
	106, 107, 108, 109, 127, 111, 112, 101, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 260, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 127, 111, 112, 101, 0, 98, 99, 0,
	0, 0, 0, 0, 127, 111, 112, 101, 0, 98,
	99, 0, 0, 0, 0, 0, 127, 111, 112, 101,
	0, 98, 99, 113, 0, 0, 124, 0, 0, 104,
	105, 106, 107, 108, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 108, 109, 197, 132, 0, 0, 0, 0, 104,
	105, 106, 107, 108, 109, 193, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 108, 109, 0, 0, 28,
	12, 13, 14, 15, 16, 18, 19, 20, 21, 24,
	25, 22, 23, 29, 30, 17, 36, 37, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 28, 12, 13, 14, 15,
	16, 18, 19, 20, 21, 24, 25, 22, 23, 29,
	30, 17, 36, 37, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 28, 12, 13, 14, 15, 16, 18, 19, 20,
	21, 24, 25, 22, 23, 29, 30, 17, 36, 37,
	35, 289, 28, 12, 13, 14, 15, 16, 18, 19,
	20, 21, 24, 25, 22, 23, 29, 30, 17, 36,
	37, 35,
}
var yyPact = []int{

	932, 932, -1000, -1000, -1000, 107, 607, 1213, 1213, 1213,
	305, 276, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 112, -1000, 270, 57, 56, -1000, -1000, -1000, -1000,
	-22, 501, -1000, 607, -1000, -1000, 438, 107, -1000, -1000,
	-1000, 276, 1020, 1120, 112, -1000, -1000, 220, -45, 785,
	348, -48, -1000, 270, 734, 607, -1000, -1000, -1000, -1000,
	546, 352, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -4,
	1048, -7, -1000, -32, 264, 261, 252, 617, 251, 365,
	-19, -21, 789, -1000, -1000, 109, 58, 364, 1072, 1072,
	1048, 1060, 156, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1, -1000, -1000, 689, 13, 26, 329, 94, 354, 22,
	29, -1000, -13, 79, -1000, -1000, -1000, -1000, 219, 274,
	-1000, 28, -1000, -1000, 266, -1000, -1000, -1000, 785, 417,
	-1000, 265, 785, 785, -27, -1000, -15, 348, -1000, -1000,
	-1000, 734, -1000, -1000, -1000, -1000, 509, 617, -8, 617,
	1048, -1000, 1048, 1048, 1048, 275, 772, -41, -1000, -1000,
	-1000, -35, 1048, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1048, 1048, 1048, 977, 363, 359,
	-1000, -1000, -1000, 1048, -1000, -1000, -1000, 689, 1048, 1048,
	257, 217, 118, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
	1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, -1000, -1000,
	-1000, 351, 1192, -1000, -1000, 288, 139, 845, 949, 77,
	-1000, -1000, -36, -1000, -9, 1048, -1000, -1000, -1000, 348,
	1048, -30, -39, -1000, -1000, -1000, 617, -1000, -1000, 234,
	218, 211, 140, 772, -1000, -1000, -1000, 156, 9, 119,
	-1000, 209, -1000, -1000, -1000, 203, -1, 13, -1000, 1048,
	-1000, 238, 887, 26, 329, 94, 94, 354, 354, 354,
	354, 22, 22, 29, 29, -1000, -1000, -1000, -1000, -1000,
	-1000, 139, 934, 1156, 132, -1000, 120, -1000, 72, -1000,
	-1000, 265, 1048, -1000, -1000, -1000, -1000, -1000, 701, -1000,
	617, 617, 617, 1048, 80, 1048, -1000, -1000, 1048, -1000,
	-1000, -1000, 60, -1000, 82, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 281, -1000, -1000, 208, 617, 110, -1000, -1000,
	-1000, -1000, 617, -42, -1000, 617, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 491, 487, 34, 451, 450, 7, 1, 449, 8,
	24, 35, 44, 51, 45, 18, 23, 64, 67, 80,
	441, 2, 440, 17, 288, 12, 439, 435, 50, 236,
	300, 5, 10, 433, 432, 430, 28, 25, 179, 428,
	6, 27, 4, 26, 19, 3, 420, 419, 418, 16,
	31, 15, 417, 0, 405, 746, 9, 401, 378, 371,
	97, 529, 414, 370,
}
var yyR1 = []int{

	0, 2, 2, 2, 2, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 7, 7, 7, 7, 7,
	7, 8, 8, 8, 8, 8, 8, 9, 9, 11,
	11, 11, 11, 12, 12, 12, 13, 13, 13, 14,
	14, 14, 14, 14, 15, 15, 15, 16, 16, 17,
	17, 18, 18, 19, 19, 20, 20, 21, 21, 6,
	6, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 3, 3, 23, 24, 24, 25, 25, 25,
	25, 25, 25, 26, 26, 30, 30, 27, 27, 27,
	27, 27, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 33, 33, 33, 35, 35, 36,
	36, 37, 38, 38, 38, 38, 39, 39, 40, 40,
	40, 34, 34, 34, 41, 41, 42, 42, 29, 29,
	31, 31, 44, 44, 44, 44, 44, 44, 44, 43,
	43, 43, 43, 47, 47, 45, 45, 48, 48, 49,
	49, 49, 46, 46, 10, 10, 50, 50, 50, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 32, 32,
	32, 52, 52, 53, 53, 53, 53, 53, 53, 54,
	54, 54, 55, 55, 55, 55, 61, 61, 60, 60,
	56, 56, 57, 57, 57, 58, 58, 58, 58, 59,
	59, 59, 59, 59, 1, 1, 62, 62, 63, 63,
	63, 63,
}
var yyR2 = []int{

	0, 1, 1, 1, 3, 1, 4, 3, 4, 3,
	3, 2, 2, 1, 3, 1, 2, 2, 2, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 4, 1,
	3, 3, 3, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 5, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 1, 2, 1,
	2, 1, 2, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 5, 4, 2, 1, 1, 1,
	2, 3, 2, 1, 2, 1, 1, 3, 1, 2,
	3, 4, 5, 2, 1, 3, 1, 3, 1, 1,
	2, 1, 1, 3, 4, 3, 4, 4, 3, 1,
	2, 2, 3, 1, 2, 1, 3, 1, 3, 2,
	2, 1, 1, 3, 1, 2, 1, 1, 2, 3,
	2, 3, 3, 4, 2, 3, 3, 4, 1, 3,
	4, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	4, 3, 2, 3, 3, 4, 1, 2, 1, 2,
	1, 2, 5, 7, 5, 5, 7, 6, 7, 3,
	2, 2, 2, 3, 1, 2, 1, 1, 4, 3,
	3, 2,
}
var yyChk = []int{

	-1000, -1, -62, -63, -24, -25, -31, -27, -28, -29,
	-43, -44, 30, 31, 32, 33, 34, 45, 35, 36,
	37, 38, 41, 42, 39, 40, -33, -34, 29, 43,
	44, 70, 4, 63, -35, 48, 46, 47, -62, 84,
	-26, -31, -30, -61, -55, -24, 85, -25, -25, -25,
	-25, -44, 65, 63, -47, -43, -29, -31, 4, 85,
	85, 4, 84, 68, 83, -61, -55, -24, -55, 86,
	-60, -61, -53, -54, -55, -56, -57, -58, -59, 4,
	50, 51, 84, -3, 52, 54, 55, 56, 57, 58,
	59, 60, 61, -6, -21, -7, -20, -4, 9, 10,
	-8, 7, -19, -2, 69, 70, 71, 72, 73, 74,
	-18, 5, 6, 63, -17, -16, -15, -14, -13, -12,
	-11, -9, -31, -23, 66, -21, -7, 4, -45, -46,
	64, -48, 4, -49, -25, -43, -29, 64, 85, -36,
	-37, -38, -28, -29, -41, -42, 4, 85, -30, -32,
	-6, 85, -55, 86, -53, 86, -60, 82, -23, 82,
	68, 84, 63, 63, 63, -53, 63, 4, 84, 84,
	84, -3, -22, 83, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 18, 81, 65, 63, 67, 8,
	9, 10, -7, 63, -7, -9, -7, 63, 17, 80,
	-3, -10, -38, 79, 69, 15, 16, 77, 78, 13,
	14, 11, 12, 71, 72, 70, 75, 76, 66, 64,
	64, 68, 68, -31, -50, -43, -51, 63, 65, -36,
	86, -37, -39, -40, -31, 82, -38, -38, 86, 68,
	83, -41, -52, -32, 86, -53, 82, -53, -6, -3,
	-3, -3, 55, -56, 84, 84, -6, -19, -3, -3,
	64, -5, -6, 4, 4, -10, -18, -17, 64, 64,
	-50, -43, 63, -16, -15, -14, -14, -13, -13, -13,
	-13, -12, -12, -11, -11, -9, -9, -9, 4, 49,
	-49, -51, 65, 63, -50, 64, -45, 66, -23, 86,
	84, 68, 82, -23, -42, -23, 86, 86, 68, -53,
	64, 64, 64, 63, -56, 82, 66, 64, 68, 64,
	-9, 66, -23, 64, -45, 64, 64, 66, -40, -23,
	86, -32, -53, -53, -53, -3, 64, -3, -21, -6,
	66, 64, 53, 64, -53, 64, -53, 84, -53,
}
var yyDef = []int{

	0, -2, 204, 206, 207, 0, 0, 77, 79, 81,
	0, 131, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 128,
	129, 139, 132, 0, 0, 0, 107, 108, 205, 75,
	0, 85, 83, 0, 211, 186, 0, 0, 78, 80,
	82, 130, 0, 0, 140, 141, 143, 0, 106, 0,
	0, 123, 76, 0, 0, 0, 209, 187, 210, 182,
	0, 0, 188, 173, 174, 175, 176, 177, 178, 1,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 59, 27, 57, 15, 0, 0,
	0, 0, 55, 5, 21, 22, 23, 24, 25, 26,
	53, 2, 3, 0, 51, 49, 47, 44, 39, 36,
	33, 29, 85, 0, 135, 74, 27, 1, 0, 0,
	138, 145, 152, 147, 151, 142, 144, 133, 0, 0,
	109, 0, 113, 115, 0, 124, 126, 0, 84, 86,
	168, 0, 208, 183, 189, 184, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 0, 0, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 0, 0, 0, 0, 0, 0,
	11, 12, 16, 0, 17, 18, 19, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 136,
	137, 0, 0, 149, 150, 156, 157, 0, 0, 0,
	105, 110, 0, 116, 118, 0, 112, 114, 121, 0,
	0, 0, 0, 171, 185, 179, 0, 181, 73, 0,
	0, 0, 0, 0, 199, 203, 60, 56, 0, 0,
	7, 0, 13, 9, 10, 0, 54, 52, 4, 0,
	155, 156, 0, 50, 48, 45, 46, 40, 41, 42,
	43, 37, 38, 34, 35, 30, 31, 32, 153, 146,
	148, 158, 0, 0, 0, 164, 0, 160, 0, 104,
	111, 0, 0, 119, 125, 127, 122, 169, 0, 180,
	0, 0, 0, 0, 0, 0, 6, 8, 0, 20,
	28, 162, 0, 166, 0, 159, 165, 161, 117, 120,
	170, 172, 192, 194, 195, 0, 0, 0, 58, 14,
	163, 167, 0, 0, 197, 0, 193, 196, 198,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 76, 69, 3,
	63, 64, 70, 71, 68, 72, 67, 75, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 82, 84,
	77, 83, 78, 81, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 65, 3, 66, 79, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 80, 86, 73,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %U %s\n", uint(char), yyTokname(c))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf("saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
